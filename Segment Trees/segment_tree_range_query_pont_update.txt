#include <bits/stdc++.h>
using namespace std;

class SegmentTree {
public:
    vector<int> Tree;
    vector<int> nums;

    SegmentTree(vector<int> arr) {
        int n = arr.size();
        this->nums = arr;
        Tree.resize(4*n, 0);
        buildTree(1, 0, n-1);
    }

    void buildTree(int node, int start, int end) {
        if(start > end) return;
        if(start == end) {
            Tree[node] = nums[start];
            return;
        }
        int left = 2*node;
        int right = 2*node + 1;
        int mid = start + (end-start)/2;
        buildTree(left, start, mid);
        buildTree(right, mid+1, end);
        Tree[node] = max(Tree[left], Tree[right]);
    }

    int query(int l, int r) {
        return find_query(1, l, r, 0, nums.size()-1);
    }
    //range query for segment tree
    int find_query(int node, int l, int r, int start, int end) {
        if(end < l || r < start) return INT_MIN;
        if(l <= start && end <= r) return Tree[node];
        int mid = start + (end-start)/2;
        int left = 2*node;
        int right = 2*node + 1;
        int left_ans = find_query(left, l, r, start, mid);
        int right_ans = find_query(right, l, r, mid+1, end);
        return max(left_ans, right_ans);
    }
    // point update for segment Tree
    void update(int pos,int val){
        point_update(1,pos,val,0,nums.size()-1);
        
    }
    void point_update(int node,int pos,int val,int start,int end){
        if(start==end){
            Tree[node]=val;
            nums[pos]=val;
            return;
        }
        int mid=start+(end-start)/2;
        if(pos>=start&&pos<=mid){
            int left=2*node;
            point_update(left,pos,val,start,mid);
        }
        else{
            int right=2*node+1;
            point_update(right,pos,val,mid+1,end);
        }
        Tree[node]=max(Tree[2*node],Tree[2*node+1]);
    }
};

int main() {
    // Doing Range Quries to find maximum of any interval
    int n;
    cin >> n;
    vector<int> nums;
    for(int i = 0; i < n; i++) {
        int x;
        cin >> x;
        nums.push_back(x);
    }
    SegmentTree s(nums);
    cout<<s.query(0,4)<<endl;
    s.update(3,2);
    cout<<s.query(0,4)<<endl;
    return 0;
}
