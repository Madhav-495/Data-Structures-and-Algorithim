#include <bits/stdc++.h>
using namespace std;

class SegmentTree {
public:
    vector<int> Tree;
    vector<int> nums;

    SegmentTree(vector<int> arr) {
        int n = arr.size();
        this->nums = arr;
        Tree.resize(4*n, 0);
        buildTree(1, 0, n-1);
    }

    void buildTree(int node, int start, int end) {
        if(start > end) return;
        if(start == end) {
            Tree[node] = nums[start];
            return;
        }
        int left = 2*node;
        int right = 2*node + 1;
        int mid = start + (end-start)/2;
        buildTree(left, start, mid);
        buildTree(right, mid+1, end);
        Tree[node] = max(Tree[left], Tree[right]);
    }

    int query(int l, int r) {
        return find_query(1, l, r, 0, nums.size()-1);
    }

    int find_query(int node, int l, int r, int start, int end) {
        if(end < l || r < start) return INT_MIN;
        if(l <= start && end <= r) return Tree[node];
        int mid = start + (end-start)/2;
        int left = 2*node;
        int right = 2*node + 1;
        int left_ans = find_query(left, l, r, start, mid);
        int right_ans = find_query(right, l, r, mid+1, end);
        return max(left_ans, right_ans);
    }
};

int main() {
    //Range Queries in Segment Tree
    int n;
    cin >> n;
    vector<int> nums;
    for(int i = 0; i < n; i++) {
        int x;
        cin >> x;
        nums.push_back(x);
    }
    SegmentTree s(nums);
    int q;
    cin >> q;
    for(int i = 0; i < q; i++) {
        int x, y;
        cin >> x >> y;
        cout << s.query(x, y) << endl;
    }
    return 0;
}
