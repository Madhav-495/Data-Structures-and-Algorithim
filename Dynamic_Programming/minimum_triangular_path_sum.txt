class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        int m=triangle[n-1].size();
        vector<vector<int>>dp(n,vector<int>(m,0));
        dp[0][0]=triangle[0][0];
        
        int ans=INT_MAX;
        for(int i=1;i<n;i++){
            for(int j=0;j<triangle[i].size();j++){
                if(j==0){
                    dp[i][j]=dp[i-1][j]+triangle[i][j];
                }
                else if(j==triangle[i].size()-1) dp[i][j]=dp[i-1][j-1]+triangle[i][j];
                else dp[i][j]=min(dp[i-1][j-1]+triangle[i][j],dp[i-1][j]+triangle[i][j]);
                
            }
        }
        
        for(int i=0;i<m;i++){
            ans=min(ans,dp[n-1][i]);
        }
        return ans;

    }
};
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        int m=triangle[n-1].size();
       
        vector<int>prev(n+1,0);
        vector<int>curr(n+1,0);
        prev[0]=triangle[0][0];
        
        int ans=INT_MAX;
        for(int i=1;i<n;i++){
            for(int j=0;j<triangle[i].size();j++){
                if(j==0){
                    curr[j]=prev[j]+triangle[i][j];
                }
                else if(j==triangle[i].size()-1) curr[j]=prev[j-1]+triangle[i][j];
                else curr[j]=min(prev[j-1]+triangle[i][j],prev[j]+triangle[i][j]);
                
            }
            prev=curr;
        }
        
        for(int i=0;i<m;i++){
            ans=min(ans,prev[i]);
        }
        return ans;

    }
};s