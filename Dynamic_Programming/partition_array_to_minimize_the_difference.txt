class Solution {
    int solve_binary_search(vector<int>&rsum,int target){
        int i=0,j=rsum.size()-1;
        int ans=INT_MAX;int f_ans=INT_MAX;
        while(j>=i){
            int mid=i+(j-i)/2;
            if(rsum[mid]==target) return target;
            else if(rsum[mid]>target){
                if(abs(rsum[mid]-target)<ans){
                    ans=abs(rsum[mid]-target);
                    f_ans=rsum[mid];
                }
                j=mid-1;
            }
            else{
                if(abs(rsum[mid]-target)<ans){
                    ans=abs(rsum[mid]-target);
                    f_ans=rsum[mid];
                }
                i=mid+1;
            }
        }
        return f_ans;
    }
public:
    int minimumDifference(vector<int>& nums) {
        // use meet in the middle algorithim
        int n=nums.size(); 
        vector<vector<int>>left(n/2+1);
        vector<vector<int>>right(n/2+1);
        for(int i=0;i<(1<<(n/2));i++){
            int sum=0,cnt=0,sum2=0;
            for(int j=0;j<n/2;j++){
                if(i&(1<<j)){
                    cnt++;
                    sum+=nums[j];
                    sum2+=nums[j+n/2];
                }
            }
            left[cnt].push_back(sum);
            right[cnt].push_back(sum2);
        }
        int total_sum=accumulate(nums.begin(),nums.end(),0);
        for(int i=0;i<right.size();i++){
            sort(right[i].begin(),right[i].end());
        }
        int ans=INT_MAX;
        for(int i=0;i<=n/2;i++){
            for(int j=0;j<left[i].size();j++){
                int target=(total_sum-2*left[i][j])/2; 
                int temp=solve_binary_search(right[n/2-i],target);
                ans=min(ans,abs(total_sum-2*(left[i][j]+temp)));
            }
        }
        return ans;
    }
};