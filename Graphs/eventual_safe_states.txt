class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int>adj[n];
        vector<int>indegree(n,0);
        for(int i=0;i<graph.size();i++){
            for(int j=0;j<graph[i].size();j++){
                indegree[i]++;
                adj[graph[i][j]].push_back(i);
            }
        }
        
        queue<int>q;
        for(int i=0;i<n;i++){
            if(indegree[i]==0) {
                q.push(i);
            }
        }
        vector<int>ans;
        while(!q.empty()){
            int temp=q.front();
            q.pop();
            ans.push_back(temp);
            for(auto x:adj[temp]){
                indegree[x]--;
                if(indegree[x]==0) q.push(x);
            }
        }
        sort(ans.begin(),ans.end());
        return ans;
    }
};