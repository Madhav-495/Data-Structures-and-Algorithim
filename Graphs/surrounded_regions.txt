class Solution {
        private:
     bool isvalid(int i,int j,int n,int m,vector<vector<char>>& grid){
        if(i>=0&&j>=0&&i<=n-1&&j<=m-1&&grid[i][j]=='O') return true;
        return false;
    }
    void dfs(int i,int j,int n,int m,vector<vector<char>>& grid){
        
        grid[i][j]='@';
        if(isvalid(i-1,j,n,m,grid)){
            dfs(i-1,j,n,m,grid);
        }
         if(isvalid(i+1,j,n,m,grid)){
           dfs(i+1,j,n,m,grid);
        }
         if(isvalid(i,j-1,n,m,grid)){
           dfs(i,j-1,n,m,grid);
        }
         if(isvalid(i,j+1,n,m,grid)){
            dfs(i,j+1,n,m,grid);
        }return;
    }
public:
    void solve(vector<vector<char>>& board) {
//         use the concept of boundary dfs;
        int n=board.size();
        int m=board[0].size();
//         applying boundary dfs and changing the value of boundary dfs elements temprorily
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if((i==0||j==0||i==n-1||j==m-1)&&board[i][j]=='O'){
                    dfs(i,j,n,m,board);
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]=='@') board[i][j]='O';
                else if(board[i][j]=='O') board[i][j]='X';
            }
        }
    }
};