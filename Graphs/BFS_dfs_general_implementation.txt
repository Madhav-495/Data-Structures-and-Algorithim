void dfs(vector<int>adj[],vector<int>&vis,int element){
    vis[element]=1;
    cout<<element<<" ";
    for(auto x:adj[element]){
        if(!vis[x]){
            dfs(adj,vis,x);
        }
    }
}
void solve(){
    int n,e;
    cin>>n>>e;
    // considering graph to be 1 based vertices
    vector<int>adj[n+1];
    for(int i=0;i<e;i++){
        int x,y;
        cin>>x>>y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }

    vector<int>vis(n+1,0);
    dfs(adj,vis,1);
    cout<<"\n";
    for(int i=0;i<vis.size();i++) vis[i]=0;
    queue<int>q;
    q.push(1);
    vis[1]=1;
    while(!q.empty()){
        int node=q.front();
        cout<<node<<" ";
        q.pop();
        for(auto x:adj[node]){
            if(!vis[x]){
                q.push(x);
                vis[x]=1;
            }
        }
    }
}
