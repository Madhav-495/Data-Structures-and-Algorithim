class Solution {
    class DisjointSet{
    public:
    vector<int>parent;
    vector<int>rank;
    vector<int>size;
    public:
    DisjointSet(int n){
        parent.resize(n+1);
        rank.resize(n+1,0);
        for(int i=0;i<=n;i++){
            parent[i]=i;

        }
        size.resize(n+1,1);
    }
    int findUp(int node){
        if(node==parent[node]) return node;
        return parent[node]=findUp(parent[node]);
    }
    void unionByRank(int u,int v){
        int up_u=findUp(u);
        int up_v=findUp(v);
        if(up_u==up_v) return;
        if(rank[up_u]>rank[up_v]){
            parent[up_v]=up_u;
        }
        else if(rank[up_v]>rank[up_u]){
            parent[up_u]=up_v;
        }
        else {
            parent[up_u]=up_v;
            rank[up_u]++;
        }
    }
    void unionBySize(int u,int v){
        int ulp_u = findUp(u);
    int ulp_v = findUp(v);
    if (ulp_u == ulp_v) return;
    if (size[ulp_u] < size[ulp_v]) {
        parent[ulp_u] = ulp_v;
        size[ulp_v] += size[ulp_u];
    }
    else {
        parent[ulp_v] = ulp_u;
        size[ulp_u] += size[ulp_v];
        }
    }
};
public:
    int largestIsland(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        DisjointSet ds(n*n);
        // vector<int>vis(n*n,0)
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    int x[4]={0,0,1,-1};
                    int y[4]={1,-1,0,0};
                    for(int k=0;k<4;k++){
                        int newx=i+x[k];
                        int newy=j+y[k];
                        if(newx>=0&&newy>=0&&newx<n&&newy<m&&grid[newx][newy]==1){
                            ds.unionBySize(n*i+j,n*newx+newy);
                        }
                    }
                }      
            }
        }
        int ans=0;
        for(int i=0;i<n*n;i++){
            ans=max(ans,ds.size[ds.findUp(i)]);
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0){
                    int x[4]={0,0,1,-1};
                    int y[4]={1,-1,0,0};
                    set<int>s;
                    for(int k=0;k<4;k++){
                        int newx=i+x[k];
                        int newy=j+y[k];
                        if(newx>=0&&newy>=0&&newx<n&&newy<m&&grid[newx][newy]==1){
                            s.insert(ds.findUp(n*newx+newy));
                        }
                    }
                int totalsize=0;
                for(auto x:s){
                    totalsize+=ds.size[x];
                }
                ans=max(ans,totalsize+1);
                }
                
            }
        }
        return ans;
    }
};