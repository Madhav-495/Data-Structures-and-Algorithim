class Solution {
    bool dfs(int element,vector<int>adj[],int color,vector<int>&colors){
       
        colors[element]=color;
        for(auto x:adj[element]){
            if(colors[x]==-1){
                if(color==1){
                    if(!dfs(x,adj,0,colors)) return false;
                   
                }
                else{
                    if(!dfs(x,adj,1,colors)) return false;    
                }
            }
            else{
                if(colors[x]==color) return false;
            }
        }return true;
    }
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int>adj[n];
        for(int i=0;i<n;i++){
            for(int j=0;j<graph[i].size();j++){
                adj[i].push_back(graph[i][j]);
                adj[graph[i][j]].push_back(i);
            }
        }
        
        vector<int>color(n,-1);
        for(int i=0;i<n;i++){
            if(color[i]==-1){
                if(!dfs(i,adj,1,color)) return false;
            }
        }
        return true;
    }
};