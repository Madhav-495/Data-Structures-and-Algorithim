class Solution {
public:
public:
class DisjointSet
   {
       vector<int> parent, rank, size;
   
   public:
       DisjointSet(int n)
       {
           rank.resize(n + 1, 0);
           parent.resize(n + 1);
           size.resize(n+1,1);
           for (int i = 0; i < parent.size(); i++)
           {
               parent[i] = i;
           }
       }
       int findUp(int node)
       {
           if (node == parent[node])
           {
               return node;
           }
           return parent[node] = findUp(parent[node]);
       }
       void unionByRank(int u, int v)
       {
           // step 1 :finding the ultimate parent of u and v
           int ulp_u = findUp(u);
           int ulp_v = findUp(v);
           if (ulp_u == ulp_v)
               return;
           // step2:find the rank of ulp_u and ulp_v
           if (rank[ulp_u] < rank[ulp_v])
           {
               parent[ulp_u] = ulp_v;
           }
           else if (rank[ulp_u] > rank[ulp_v])
           {
               parent[ulp_v] = ulp_u;
           }
           else
           {
               parent[ulp_v] = ulp_u;
               rank[ulp_u]++;
           }
       }
       void unionBySize(int u, int v) {
            int ulp_u = findUp(u);
            int ulp_v = findUp(v);
            if (ulp_u == ulp_v) return;
            if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
            }
            else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
            }
    }
};
    int minimumHammingDistance(vector<int>& source, vector<int>& target, vector<vector<int>>& allowedSwaps) {
        int n=source.size();
        DisjointSet ds(n+1);
        for(int i=0;i<allowedSwaps.size();i++){
            ds.unionByRank(allowedSwaps[i][0],allowedSwaps[i][1]);
        }
        int hamm=0;
        map<int,map<int,int>>mp;
        for(int i=0;i<n;i++){
            mp[ds.findUp(i)][source[i]]++;
        }
        for(int i=0;i<n;i++){
            mp[ds.findUp(i)][target[i]]--;
        }
        for(auto x:mp){
            auto a=x.second;
            for(auto b:a){
                hamm+=abs(b.second);
            }
        }
        return hamm/2;
    }
};