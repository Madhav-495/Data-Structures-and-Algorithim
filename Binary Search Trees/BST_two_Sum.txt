void inorder(vector<int>&ans,TreeNode*root){
    if(root==NULL) return;
    inorder(ans,root->left);
    ans.push_back(root->val);
    inorder(ans,root->right);
}
bool find_target(TreeNode*root2,int target){
    stack<TreeNode*>l;
    stack<TreeNode*>r;
    TreeNode*curr=root2;
    while(curr){
        l.push(curr);
        curr=curr->left;
    }
    curr=root2->right;
    while(curr){
        r.push(curr);
        curr=curr->right;
    }
    while(!l.empty()&&!r.empty()){
        int left_val=l.top()->val;
        int right_val=r.top()->val;
        cout<<left_val<<" "<<right_val<<endl;
        if(left_val+right_val==target){
            return true;
        }
        else if(left_val+right_val>target){
            TreeNode*temp=r.top()->left;
            r.pop();
            while(temp){
                r.push(temp);
                temp=temp->left;
            }
        }
        else{
            TreeNode*temp=l.top()->right;
            l.pop();
            while(temp){
                l.push(temp);
                temp=temp->right;
            }
        }
    }
    return false;
}
void solve(){
    
    TreeNode*root2=new TreeNode(35);
    root2->left=new TreeNode(8);
    root2->right=new TreeNode(40);
    root2->left->left=new TreeNode(2);
    root2->left->right=new TreeNode(7);
    root2->right->left=new TreeNode(39);
    root2->right->right=new TreeNode(41);
    cout<<find_target(root2,0)<<endl;
}