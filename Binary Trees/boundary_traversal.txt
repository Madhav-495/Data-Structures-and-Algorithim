struct TreeNode{
    TreeNode*left;
    TreeNode*right;
    int val;
    TreeNode(int x){
        this->left=NULL;
        this->right=NULL;
        this->val=x;
    }
};
void left_boundary(TreeNode*root,vector<int>&ans){
    if(root==NULL) return;
    if(root->left==NULL&&root->right==NULL){
        return ;
    }
    ans.push_back(root->val);
    left_boundary(root->left,ans);
}
void leaf_boundary(TreeNode*root,vector<int>&ans){
    if(root==NULL) return;
    if(root->left==NULL&&root->right==NULL){
        ans.push_back(root->val);
        return;
    }
    leaf_boundary(root->left,ans);
    leaf_boundary(root->right,ans);
}
void right_boundary(TreeNode*root,vector<int>&ans){
    if(root==NULL) return;
    if(root->left==NULL&&root->right==NULL){
        return ;
    }
    ans.push_back(root->val);
    left_boundary(root->right,ans);
}
void solve(){
    int res=0;
    TreeNode*root2=new TreeNode(10);
    root2->left=new TreeNode(20);
    root2->right=new TreeNode(30);
    root2->left->left=new TreeNode(40);
    root2->left->right=new TreeNode(60);
    root2->right->left=new TreeNode(90);
    root2->right->right=new TreeNode(100);
    vector<int>ans;
    left_boundary(root2,ans);
    leaf_boundary(root2,ans);
    right_boundary(root2->right,ans);
    for(auto x:ans){
        cout<<x<<" ";
    }
    cout<<"\n";
}