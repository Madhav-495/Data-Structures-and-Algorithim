void tra(vector<int>&ans,TreeNode*root){
    if(root==NULL) return;
    tra(ans,root->left);
    ans.push_back(root->val);
    tra(ans,root->right);
}
void solve(){
    
    TreeNode*root2=new TreeNode(2);
    root2->left=new TreeNode(35);
    root2->right=new TreeNode(10);
    root2->left->left=new TreeNode(2);
    root2->left->right=new TreeNode(3);
    root2->right->left=new TreeNode(5);
    root2->right->right=new TreeNode(2);
    TreeNode*curr=root2;
    vector<int>inorder;
    tra(inorder,root2);
    for(auto x:inorder){
        cout<<x<<" ";
    }
    vector<int>preorder;
    cout<<"\n";
    vector<int>ans;
    while(curr){
        TreeNode*temp=curr->left;
        if(temp==NULL){
            ans.push_back(curr->val);
            preorder.push_back(curr->val);
            curr=curr->right;
        }
        else{
            while(temp->right!=curr&&temp->right!=NULL){
                temp=temp->right;
            }
            if(temp->right==NULL){
                temp->right=curr;
                preorder.push_back(curr->val);
                curr=curr->left;
            }
            else{
                ans.push_back(curr->val);
                temp->right=NULL;
                curr=curr->right;
            }
        }
    }
    for(auto x:ans){
        cout<<x<<" ";
    }
    cout<<"\n";
    for(auto x:preorder){
        cout<<x<<" ";
    }
    cout<<"\n";
}