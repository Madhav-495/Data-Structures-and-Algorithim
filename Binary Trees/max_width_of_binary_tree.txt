void solve(){
    int res=0;
    TreeNode*root2=new TreeNode(2);
    root2->left=new TreeNode(35);
    root2->right=new TreeNode(10);
    root2->left->left=new TreeNode(2);
    root2->left->right=new TreeNode(3);
    root2->right->left=new TreeNode(5);
    root2->right->right=new TreeNode(2);
    queue<pair<TreeNode*,int>>q;
    q.push({root2,0});
    int ans=0;
    while(!q.empty()){
        int size=q.size();
        int mini=q.front().second;
        int first,last;
        for(int i=0;i<size;i++){
            int curr_id=q.front().second-mini;
            TreeNode*temp=q.front().first;
            q.pop();
            if(i==0){
                first=curr_id;
            }
            if(i==size-1) last=curr_id;
            if(temp->left){
                q.push({temp->left,2*curr_id+1});
            }
            if(temp->right){
                q.push({temp->right,2*curr_id+2});
            }
        }
        ans=max(ans,last-first+1);
    }
    cout<<ans<<endl;
}